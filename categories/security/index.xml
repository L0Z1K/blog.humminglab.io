<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Security - Category - All about IoT</title><link>https://blog.humminglab.io/categories/security/</link><description>Security - Category - All about IoT</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 21 Mar 2022 09:00:00 +0900</lastBuildDate><atom:link href="https://blog.humminglab.io/categories/security/" rel="self" type="application/rss+xml"/><item><title>TLS/암호 알고리즘 쉽게 이해하기(8) - RSA</title><link>https://blog.humminglab.io/posts/tls-cryptography-8-rsa/</link><pubDate>Mon, 21 Mar 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-8-rsa/</guid><description>지난 번에 설명한 이산대수를 이용하면 RSA 의 기본원리도 쉽게 이해할 수 있다.
RSA는 이름에 특별한 의미는 없고, 알고리즘을 발명한 사람들(Ron Rivest, Adi Shamir, Leonard Adleman)의 약자를 따서 만든 것이다.
AES와는 달리 공개키(public key)와 개인키(private key) 두 벌로 구성된 키를 가지고 있는 비대칭키 암호화 알고리즘이다.
가장 일반적인 사용용도는 다음과 같이 Bob 이 Alice에게 암호 데이타 전달하는 방법이다.
Alice의 공개키는 공개되어 누구나 알수 있다. Bob은 Alice의 공개키를 이용하여 암호화 하여 일반 채널로 전달한다.</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(7) - Diffie-Hellman Key Exchange</title><link>https://blog.humminglab.io/posts/tls-cryptography-7-diffie-hellman/</link><pubDate>Thu, 10 Mar 2022 16:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-7-diffie-hellman/</guid><description>지난 번에 설명한 이산대수를 이용하여 Diffie-Hellman Key Exchange(DHKE, 키교환 또는 키합의)을 이해해 보자.
TLS 암호화 채널을 절차를 간단하게 보면 다음과 같다.
서버를 믿을 수 있는지 검증, 필요시 클라이언트도 인증 RSA 암호화 채널로 키를 전달하거나, Diffie-Hellman 방식으로 키교환 교환한 키로 AES, ChaCha20와 같은 대칭키로 암호화 Diffie-Hellman은 여기서 두번째 대칭키를 교환하는 방법이다.
RSA와 같은 비대칭키를 이용하여 암호화 채널을 만든 후 이를 이용하여 대칭키를 전달하는 것은 직관적이다. 하지만 Diffie-Hellman 방식은 이와 같은 암호화 채널 없이도, 서로 키를 교환할 수 있는 방식이다.</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(6) - 이산 대수</title><link>https://blog.humminglab.io/posts/tls-cryptography-6-math/</link><pubDate>Thu, 03 Mar 2022 00:20:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-6-math/</guid><description>키 합의, 비대칭키는 역연산이 실제적으로 불가능한 수학적 이론을 기반으로 만들어진 알고리즘이기 때문에, 이의 기본 동작을 이해하기 위해서는 수학적인 지식이 어느정도 필요하다.
여기에서는 이들 알고리즘의 동작 원리에 필요한 최소한의 수학을 정리해본다.
타원알고리즘을 제외하고, 키합의와 비대칭키 알고리즘을 이해하기 위해서는 다음과 같은 것을 알아야 한다.
소인수 분해 유클리드 호제법을 이용하여 두 수의 최대 공약 수 찾기 확장 유클리드 호제법으로 소수 모듈로 연산에서 곱하기 역원 찾기 페르마 소정리를 이용하여 소수 모듈로의 지수 연산 역원 찾기 오일러 정리를 이용하여 일반 모듈로에서 지수 역원 찾기 소인수 분해 임의의 정수를 소인수 분해하는 데에는 효과적인 방법이 없다.</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(5) - Stream Cipher</title><link>https://blog.humminglab.io/posts/tls-cryptography-5-stream-cipher/</link><pubDate>Wed, 02 Mar 2022 18:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-5-stream-cipher/</guid><description>일정 데이터 단위로 암호화를 하는 블럭 암호와 비교하여 스트림 암호(Stream Cipher)는 비트 또는 바이트 단위로 암호화를 하는 방식이다.
쉽게 말해서 블럭 암호는 키를 사용하여 (필요하면 IV도 포함해서) 블럭단위로 전치와 치환을 통하여 암호하를 가하는 방식이라고 할 수 있다. 이와 비교하여 스트림 암호는 키와 IV(Initial Vector)로 다양한 연산을 이용하여 난수열을 만들고, 이를 이용하여 평문과 XOR 과정을 통하여 암호화를 하는 것이다. 블럭 암호에서 설명한 AES-CTR와 같은 것이 이와 같은 난수열을 만드는 방법 중 하나이다.</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(4) - Block Cipher Mode</title><link>https://blog.humminglab.io/posts/tls-cryptography-4-block-cipher-mode/</link><pubDate>Mon, 28 Feb 2022 19:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-4-block-cipher-mode/</guid><description>이전 글의 Block Cipher(블럭암호) 암호화 방법을 그대로 사용하기에는 몇가지 문제가 있다 (아래 내용에서는 AES로 표기하나, 다른 블럭암호 방식에 공통적인 사항이다).
우선 첫번째 문제는 공격자가 암호키를 몰라도 암호 블럭을 순서를 바꾸어나 다른 내용으로 바꿀 수 있다는 것이다. AES 암호의 경우 256bits(16bytes) 단위로 암호화 되는데, 예를 들어 다음과 같은 거래 정보를 암호화 한다고 해보자.
1 2 3 4 5 6 7 8 9 10 11 struct { char from[16]; char to[16]; char amount[16]; } transaction; struct transaction tx = { .</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(3) - Block Cipher</title><link>https://blog.humminglab.io/posts/tls-cryptography-3-block-cipher/</link><pubDate>Mon, 21 Feb 2022 20:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-3-block-cipher/</guid><description>암호 알고리즘은 암호화/복호화 작업을 동일한 키 하나로 사용하는지, 아니면 암호화하는 키(공개키)와 복호화 하는 키(개인키)를 따로 사용하는지에 따라 각각 대칭키(Symmetric Key), 비대칭키(Asymmetric Key) 방식으로 나뉜다.
대칭키는 암호화 할때 일정 블럭 크기(예를 들어 128bits)를 한번에 암호화 할지, 아니면 비트/바이트 단위로 암호화 하는지에 따라서 블럭 암호(Block Cipher), 스트림 암호(Stream Cipher) 로 구분한다.
여기에서는 블럭 암호 방식에 대해서 설명한다.
블럭 암호 개요 비대칭키 방식은 역변환을 하려면 수십년, 수백년 이상 소요되어 실제적으로 역변환이 불가능한 수학적 이론을 바탕으로 구현되어 있지만, 대칭키인 블럭암호는 이리저리 뒤섞거나(전치), 연산이나 코드북을 이용해서 다른 값으로 변경(치환) 하는 작업을 복잡하게 반복하여 만들어낸 암호화 방법이다.</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(2) - Random</title><link>https://blog.humminglab.io/posts/tls-cryptography-2-random/</link><pubDate>Fri, 11 Feb 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-2-random/</guid><description>암호 알고리즘에서 난수는 중요한 요소이다. 예를 들어 암호 키 생성 시에도 난수로 만드는데, 생성된 난수가 편향성을 가지게 되면 암호 알고리즘이 아무리 좋아도 취약해 질 수 밖에 없다.
한 예로 오래전 일이지만, 2008년 Debian linux OpenSSL 0.9.8 의 잘못된 patch로 seed를 current process ID 로만 사용하여 결과적으로 65,536개의 값 중 하나로 난수가 생성되어 brute force 공격으로 키를 찾을 수 있는 문제가 발생한 적도 있고, 이외에도 CWE(Commn Weakness Enumeration) 에서 random 으로 검색해보면 문제가 되었던 여러 케이스들을 찾아 볼 수 있다.</description></item><item><title>TLS/암호 알고리즘 쉽게 이해하기(1) - 개요</title><link>https://blog.humminglab.io/posts/tls-cryptography-1-overview/</link><pubDate>Wed, 09 Feb 2022 09:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/tls-cryptography-1-overview/</guid><description>HTTPS의 SSL/TLS를 이해하는 것은 생각만큼 쉽지 않다. React, kubernetes 같이 오픈 생태계에서 핫 한 분야들은 다양한 시각으로 설명한 자료들이 많아 여러 방법으로 이해할 수도 있겠지만, 수십여년간 수학자, 암호학자들에게서 다듬어진 암호학에 대해서는 말랑말랑한 자료를 찾기가 쉽지는 않다. 좋은 자료라고 찾아 보아도 읽다 보면 이내 수많은 용어들과 수학 이론에 막혀 버리곤 한다. 그렇다고 제대로된 이해없이 SSL/TLS 나 암호화 알고리즘을 사용하게 되면 작은 실수로 인하여 보안에 심각한 문제를 만들 수도 있다.
여기에서는 일반 개발자를 위한 관점으로 암호 알고리즘과 TLS/SSL을 정리해 보기로 한다.</description></item><item><title>Wireshark 으로 TLS 캡쳐 및 디코딩 하기</title><link>https://blog.humminglab.io/posts/how-to-capture-tls-with-wireshark/</link><pubDate>Tue, 21 Dec 2021 16:00:00 +0900</pubDate><author><name>YSLee</name><uri>https://www.humminglab.io</uri><email>info@humminglab.io</email></author><guid>https://blog.humminglab.io/posts/how-to-capture-tls-with-wireshark/</guid><description>프로토콜을 개발하거나 검증하려고 할 때 SSL/TLS 암호화 채널로 전송되는 데이타를 디코딩하여 확인이 필요할 때가 있다. 이 글에서는 시험하려는 프로그램의 수정 없이 또는 최소한의 수정으로 디코딩 하는 방법을 설명한다.
개요 TLS 채널의 초기 셋업 절차는 크게 보면 다음과 같은 절차로 이루어진다.
서버 인증서를 받아서 검증하기 필요하면 클라이언트 인증서를 받아서 검증하기 암호화 방식을 이용하여 대칭키 교환 대칭키를 이용한 암호화된 데이타 송수신 패킷을 분석하기에 필요한 사항은 결국은 위 세번째 과정에서 교환한 대칭키(Master Secret)를 얻는 것이다.</description></item></channel></rss>